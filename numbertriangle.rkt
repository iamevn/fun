(define (minimum list)
  (let loop ([n '()] [l list])
    (cond ((null? l)
           n)
          ((null? n)
           (loop (car l) (cdr l)))
          ((< (car l) n)
           (loop (car l) (cdr l)))
          (else
           (loop n (cdr l))))))

(define (maximum list)
  (let loop ([n '()] [l list])
    (cond ((null? l)
           n)
          ((null? n)
           (loop (car l) (cdr l)))
          ((> (car l) n)
           (loop (car l) (cdr l)))
          (else
           (loop n (cdr l))))))

(define (sum list)
  (let loop ([n 0] [l list])
    (if (null? l) n
      (loop (+ n (car l)) (cdr l)))))

(define (avg list)
  (let loop ([n 0] [l list])
    (if (null? l) (/ (sum list) n)
      (loop (add1 n) (cdr l)))))

(define (triangle-printer min max)
  (define list '())
  ; print top half of triangle
  (let print-loop ([index min])
    (let line-loop ([n 1])
      (when (<= n index)
        (display n)
        (set! list (cons n list))
        (display "     ")
        (line-loop (add1 n))))
    (newline)
    (when (< index max)
      (print-loop (add1 index))))
  ; print bottom half of triangle
  (let print-loop ([index (sub1 max)])
    (let line-loop ([n 1])
      (when (<= n index)
        (display n)
        (set! list (cons n list))
        (display "     ")
        (line-loop (add1 n))))
    (newline)
    (when (> index min)
      (print-loop (sub1 index))))
  ; print min, max, sum and average
  (display "Min: ")
  (display (minimum list))
  (newline)
  (display "Max: ")
  (display (maximum list))
  (newline)
  (display "Sum: ")
  (display (sum list))
  (newline)
  (display "Average: ")
  (display (avg list)))
